{
  "problemSet": {
    "title": "Java Algorithms & Functions - Chapter 3",
    "description": "Linear search, accumulators, basic functions, and algorithmic thinking exercises based on Pawnee Parks Department theme",
    "version": "1.0",
    "problems": [
      {
        "id": "simple_accumulator",
        "title": "Budget Total Calculator",
        "description": "Basic accumulator pattern for summing values",
        "difficulty": "beginner",
        "code": [
          "public class BudgetTotal {",
          "    public static void main(String[] args) {",
          "        // Create a decimal array with monthly costs (850.00, 950.00, 1200.00)",
          "        double[] costs = {850.00, 950.00, 1200.00};",
          "        // Create a decimal variable to store the running total (0.0)",
          "        double total = 0.0;",
          "        // Create a loop that goes through each array position",
          "        for (int i = 0; i < costs.length; i++) {",
          "            // Add current array value to the running total",
          "            total = total + costs[i];",
          "        }",
          "        // Display the final total",
          "        System.out.println(\"Total budget: $\" + total);",
          "    }",
          "}"
        ]
      },
      {
        "id": "counting_accumulator",
        "title": "Popular Event Counter",
        "description": "Using accumulator to count items meeting criteria",
        "difficulty": "beginner",
        "code": [
          "public class PopularEvents {",
          "    public static void main(String[] args) {",
          "        // Create a whole number array with attendance values (45, 85, 120, 150)",
          "        int[] attendance = {45, 85, 120, 150};",
          "        // Create a counter variable to track popular events (0)",
          "        int popularCount = 0;",
          "        // Create a loop that goes through each array position",
          "        for (int i = 0; i < attendance.length; i++) {",
          "            // Check if current attendance is greater than 100",
          "            if (attendance[i] > 100) {",
          "                // Add 1 to the popular events counter",
          "                popularCount++;",
          "            }",
          "        }",
          "        // Display the count of popular events",
          "        System.out.println(\"Popular events: \" + popularCount);",
          "    }",
          "}"
        ]
      },
      {
        "id": "basic_linear_search",
        "title": "Employee Search",
        "description": "Simple linear search through an array",
        "difficulty": "intermediate",
        "code": [
          "public class EmployeeSearch {",
          "    public static void main(String[] args) {",
          "        // Create a text array with employee names (April, Ben, Leslie, Ron)",
          "        String[] employees = {\"April\", \"Ben\", \"Leslie\", \"Ron\"};",
          "        // Create a text variable with the name to search for (Leslie)",
          "        String searchName = \"Leslie\";",
          "        // Create a whole number variable to store found position (-1)",
          "        int position = -1;",
          "        // Create a loop that goes through each array position",
          "        for (int i = 0; i < employees.length; i++) {",
          "            // Check if current array value equals the search name",
          "            if (employees[i].equals(searchName)) {",
          "                // Store the current position where name was found",
          "                position = i;",
          "                // Exit the loop immediately",
          "                break;",
          "            }",
          "        }",
          "        // Check if the name was not found (position still -1)",
          "        if (position == -1) {",
          "            // Display not found message",
          "            System.out.println(\"Employee not found\");",
          "        } else {",
          "            // Display found message with name and position",
          "            System.out.println(\"Found \" + searchName + \" at position \" + position);",
          "        }",
          "    }",
          "}"
        ]
      },
      {
        "id": "find_maximum",
        "title": "Busiest Park Finder",
        "description": "Finding maximum value using accumulator pattern",
        "difficulty": "intermediate",
        "code": [
          "public class BusiestPark {",
          "    public static void main(String[] args) {",
          "        // Create a text array with park names (Central Park, Lake Park, Oak Park)",
          "        String[] parks = {\"Central Park\", \"Lake Park\", \"Oak Park\"};",
          "        // Create a whole number array with visitor counts (85, 150, 200)",
          "        int[] visitors = {85, 150, 200};",
          "        // Create a variable to track the highest visitor count using first array value",
          "        int maxVisitors = visitors[0];",
          "        // Create a variable to track the position of highest count (0)",
          "        int maxIndex = 0;",
          "        // Create a loop starting at position 1 through end of array",
          "        for (int i = 1; i < visitors.length; i++) {",
          "            // Check if current visitor count is greater than current maximum",
          "            if (visitors[i] > maxVisitors) {",
          "                // Update maximum visitor count to current value",
          "                maxVisitors = visitors[i];",
          "                // Update maximum position to current position",
          "                maxIndex = i;",
          "            }",
          "        }",
          "        // Display the park name at the maximum position",
          "        System.out.println(\"Busiest park: \" + parks[maxIndex]);",
          "        // Display the maximum visitor count",
          "        System.out.println(\"Daily visitors: \" + maxVisitors);",
          "    }",
          "}"
        ]
      },
      {
        "id": "search_and_count",
        "title": "Equipment Inventory",
        "description": "Combining search and accumulator patterns",
        "difficulty": "intermediate",
        "code": [
          "public class EquipmentCheck {",
          "    public static void main(String[] args) {",
          "        // Create a text array with equipment names (Mower, Rake, Shovel)",
          "        String[] equipment = {\"Mower\", \"Rake\", \"Shovel\"};",
          "        // Create a whole number array with quantities (2, 5, 8)",
          "        int[] quantities = {2, 5, 8};",
          "        // Create a text variable with the item to search for (Rake)",
          "        String searchItem = \"Rake\";",
          "        // Create a variable to store found quantity (0)",
          "        int foundQuantity = 0;",
          "        // Create a loop that goes through each array position",
          "        for (int i = 0; i < equipment.length; i++) {",
          "            // Check if current equipment name equals search item",
          "            if (equipment[i].equals(searchItem)) {",
          "                // Store the quantity at the matching position",
          "                foundQuantity = quantities[i];",
          "                // Exit the loop immediately",
          "                break;",
          "            }",
          "        }",
          "        // Create a variable to store total quantity (0)",
          "        int total = 0;",
          "        // Create a loop that goes through each quantity position",
          "        for (int i = 0; i < quantities.length; i++) {",
          "            // Add current quantity to the running total",
          "            total = total + quantities[i];",
          "        }",
          "        // Display the found item and its quantity",
          "        System.out.println(searchItem + \" quantity: \" + foundQuantity);",
          "        // Display the total of all equipment",
          "        System.out.println(\"Total equipment: \" + total);",
          "    }",
          "}"
        ]
      },
      {
        "id": "simple_function",
        "title": "Park Fee Calculator",
        "description": "Basic function with parameter and return value",
        "difficulty": "intermediate",
        "code": [
          "public class ParkFees {",
          "    // Create a function that takes an age parameter and returns a decimal fee",
          "    public static double calculateFee(int age) {",
          "        // Check if age is less than 12",
          "        if (age < 12) {",
          "            // Return child fee (2.00)",
          "            return 2.00;",
          "        } else if (age >= 65) {",
          "            // Return senior fee (3.00) if age is 65 or higher",
          "            return 3.00;",
          "        } else {",
          "            // Return adult fee (5.00) for all other ages",
          "            return 5.00;",
          "        }",
          "    }",
          "    public static void main(String[] args) {",
          "        // Create a whole number array with test ages (8, 25, 70)",
          "        int[] ages = {8, 25, 70};",
          "        // Create a loop that goes through each age",
          "        for (int i = 0; i < ages.length; i++) {",
          "            // Call the function with current age and store the result",
          "            double fee = calculateFee(ages[i]);",
          "            // Display the age and calculated fee",
          "            System.out.println(\"Age \" + ages[i] + \": $\" + fee);",
          "        }",
          "    }",
          "}"
        ]
      },
      {
        "id": "string_function",
        "title": "Welcome Message Generator",
        "description": "Function that processes strings and returns text",
        "difficulty": "intermediate",
        "code": [
          "public class WelcomeGenerator {",
          "    // Create a function that takes a name parameter and returns a greeting text",
          "    public static String makeGreeting(String name) {",
          "        // Return a welcome message combined with the provided name",
          "        return \"Welcome to Pawnee Parks, \" + name + \"!\";",
          "    }",
          "    // Create a function that takes an age parameter and returns visitor type text",
          "    public static String getVisitorType(int age) {",
          "        // Check if age is less than 18",
          "        if (age < 18) {",
          "            // Return youth category",
          "            return \"Youth\";",
          "        } else {",
          "            // Return adult category for all other ages",
          "            return \"Adult\";",
          "        }",
          "    }",
          "    public static void main(String[] args) {",
          "        // Create a text variable with visitor name (Leslie)",
          "        String visitor = \"Leslie\";",
          "        // Create a whole number variable with visitor age (35)",
          "        int visitorAge = 35;",
          "        // Call greeting function with visitor name and store result",
          "        String greeting = makeGreeting(visitor);",
          "        // Call visitor type function with age and store result",
          "        String type = getVisitorType(visitorAge);",
          "        // Display the personalized greeting",
          "        System.out.println(greeting);",
          "        // Display the visitor type",
          "        System.out.println(\"Visitor type: \" + type);",
          "    }",
          "}"
        ]
      },
      {
        "id": "combined_algorithm",
        "title": "Park Report Generator",
        "description": "Algorithm using functions, search, and accumulators",
        "difficulty": "advanced",
        "code": [
          "public class ParkReport {",
          "    // Create a function that takes park names and visitor arrays, returns busiest park name",
          "    public static String findBusiest(String[] names, int[] visitors) {",
          "        // Create a variable to track position of maximum visitors (0)",
          "        int maxIndex = 0;",
          "        // Create a loop starting at position 1 through end of array",
          "        for (int i = 1; i < visitors.length; i++) {",
          "            // Check if current visitor count is greater than current maximum",
          "            if (visitors[i] > visitors[maxIndex]) {",
          "                // Update maximum position to current position",
          "                maxIndex = i;",
          "            }",
          "        }",
          "        // Return the park name at the maximum position",
          "        return names[maxIndex];",
          "    }",
          "    // Create a function that takes visitor array and returns total count",
          "    public static int calculateTotal(int[] visitors) {",
          "        // Create a variable to store running total (0)",
          "        int total = 0;",
          "        // Create a loop that goes through each array position",
          "        for (int i = 0; i < visitors.length; i++) {",
          "            // Add current visitor count to running total",
          "            total = total + visitors[i];",
          "        }",
          "        // Return the final total",
          "        return total;",
          "    }",
          "    public static void main(String[] args) {",
          "        // Create a text array with park names (Central Park, Lake Park, Oak Park)",
          "        String[] parks = {\"Central Park\", \"Lake Park\", \"Oak Park\"};",
          "        // Create a whole number array with visitor counts (120, 180, 250)",
          "        int[] visitors = {120, 180, 250};",
          "        // Call function to find busiest park and store result",
          "        String busiest = findBusiest(parks, visitors);",
          "        // Call function to calculate total visitors and store result",
          "        int totalVisitors = calculateTotal(visitors);",
          "        // Display the busiest park name",
          "        System.out.println(\"Busiest park: \" + busiest);",
          "        // Display the total visitor count",
          "        System.out.println(\"Total visitors: \" + totalVisitors);",
          "    }",
          "}"
        ]
      }
    ]
  }
}