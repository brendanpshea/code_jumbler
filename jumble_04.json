{
  "problemSet": {
    "title": "Java Functions - Chapter 4",
    "description": "Function creation, parameters, return values, and string manipulation exercises based on Bob's Burgers theme",
    "version": "1.0",
    "problems": [
      {
        "id": "simple_function_call",
        "title": "Basic Burger Greeting",
        "description": "Simple function with no parameters",
        "difficulty": "beginner",
        "code": [
          "public class BurgerGreeting {",
          "    // Create a function with no parameters that returns nothing",
          "    public static void makeBurger() {",
          "        // Display the first step message",
          "        System.out.println(\"Take a bun\");",
          "        // Display the second step message", 
          "        System.out.println(\"Add a patty\");",
          "        // Display the third step message",
          "        System.out.println(\"Add cheese\");",
          "        // Display the final step message",
          "        System.out.println(\"Serve to customer\");",
          "    }",
          "    public static void main(String[] args) {",
          "        // Call the burger making function",
          "        makeBurger();",
          "    }",
          "}"
        ]
      },
      {
        "id": "function_with_parameter",
        "title": "Custom Burger Maker",
        "description": "Function with one parameter",
        "difficulty": "beginner",
        "code": [
          "public class CustomBurger {",
          "    // Create a function that takes one text parameter and returns nothing",
          "    public static void makeCustomBurger(String type) {",
          "        // Display making message combined with the burger type",
          "        System.out.println(\"Making a \" + type + \" burger\");",
          "        // Display completion message",
          "        System.out.println(\"Order ready!\");",
          "    }",
          "    public static void main(String[] args) {",
          "        // Call function with cheese burger type",
          "        makeCustomBurger(\"cheese\");",
          "        // Call function with bacon burger type", 
          "        makeCustomBurger(\"bacon\");",
          "    }",
          "}"
        ]
      },
      {
        "id": "function_with_return",
        "title": "Price Calculator",
        "description": "Function that returns a value",
        "difficulty": "beginner",
        "code": [
          "public class PriceCalculator {",
          "    // Create a function that takes a decimal parameter and returns a decimal",
          "    public static double addTax(double price) {",
          "        // Calculate tax by multiplying price by tax rate (0.08)",
          "        double tax = price * 0.08;",
          "        // Return the price plus the calculated tax",
          "        return price + tax;",
          "    }",
          "    public static void main(String[] args) {",
          "        // Create a decimal variable for burger price (8.99)",
          "        double burgerPrice = 8.99;",
          "        // Call function with burger price and store the result",
          "        double totalPrice = addTax(burgerPrice);",
          "        // Display the total price with tax included",
          "        System.out.println(\"Total with tax: $\" + totalPrice);",
          "    }",
          "}"
        ]
      },
      {
        "id": "multiple_parameters",
        "title": "Order Details Function",
        "description": "Function with multiple parameters",
        "difficulty": "intermediate",
        "code": [
          "public class OrderDetails {",
          "    // Create a function that takes text, whole number, and true/false parameters, returns nothing",
          "    public static void processOrder(String customerName, int quantity, boolean isDelivery) {",
          "        // Display customer name in order message",
          "        System.out.println(\"Order for: \" + customerName);",
          "        // Display quantity of items ordered",
          "        System.out.println(\"Quantity: \" + quantity);",
          "        // Check if order is for delivery",
          "        if (isDelivery) {",
          "            // Display delivery message if true",
          "            System.out.println(\"Preparing for delivery\");",
          "        } else {",
          "            // Display pickup message if false",
          "            System.out.println(\"Ready for pickup\");",
          "        }",
          "    }",
          "    public static void main(String[] args) {",
          "        // Call function with customer Bob, quantity 2, delivery true",
          "        processOrder(\"Bob\", 2, true);",
          "        // Call function with customer Linda, quantity 1, delivery false",
          "        processOrder(\"Linda\", 1, false);",
          "    }",
          "}"
        ]
      },
      {
        "id": "discount_calculator",
        "title": "Age-Based Discount",
        "description": "Function with conditional return values",
        "difficulty": "intermediate",
        "code": [
          "public class DiscountCalculator {",
          "    // Create a function that takes decimal and whole number parameters, returns decimal",
          "    public static double calculatePrice(double regularPrice, int age) {",
          "        // Check if age is 12 or under",
          "        if (age <= 12) {",
          "            // Return half price for kids (multiply by 0.5)",
          "            return regularPrice * 0.5;",
          "        } else if (age >= 65) {",
          "            // Return senior discount price (multiply by 0.8) if 65 or older",
          "            return regularPrice * 0.8;",
          "        } else {",
          "            // Return regular price for everyone else",
          "            return regularPrice;",
          "        }",
          "    }",
          "    public static void main(String[] args) {",
          "        // Create decimal variable for burger price (10.00)",
          "        double burgerPrice = 10.00;",
          "        // Call function for child age 8 and store result",
          "        double childPrice = calculatePrice(burgerPrice, 8);",
          "        // Call function for adult age 35 and store result",
          "        double adultPrice = calculatePrice(burgerPrice, 35);",
          "        // Display child price",
          "        System.out.println(\"Child price: $\" + childPrice);",
          "        // Display adult price",
          "        System.out.println(\"Adult price: $\" + adultPrice);",
          "    }",
          "}"
        ]
      },
      {
        "id": "string_function",
        "title": "Greeting Generator",
        "description": "Function that manipulates strings",
        "difficulty": "intermediate",
        "code": [
          "public class GreetingGenerator {",
          "    // Create a function that takes a text parameter and returns text",
          "    public static String makeGreeting(String name) {",
          "        // Return welcome message combined with the provided name",
          "        return \"Welcome to Bob's Burgers, \" + name + \"!\";",
          "    }",
          "    // Create a function that takes whole number parameter and returns text",
          "    public static String getStatus(int visits) {",
          "        // Check if number of visits is greater than 5",
          "        if (visits > 5) {",
          "            // Return VIP customer status text",
          "            return \"VIP Customer\";",
          "        } else {",
          "            // Return regular customer status text",
          "            return \"Regular Customer\";",
          "        }",
          "    }",
          "    public static void main(String[] args) {",
          "        // Create text variable with customer name (Tina)",
          "        String customerName = \"Tina\";",
          "        // Create whole number variable with visit count (3)",
          "        int visitCount = 3;",
          "        // Call greeting function with customer name and store result",
          "        String greeting = makeGreeting(customerName);",
          "        // Call status function with visit count and store result",
          "        String status = getStatus(visitCount);",
          "        // Display the personalized greeting",
          "        System.out.println(greeting);",
          "        // Display the customer status",
          "        System.out.println(\"Status: \" + status);",
          "    }",
          "}"
        ]
      },
      {
        "id": "functions_with_loops",
        "title": "Menu Display System",
        "description": "Using functions within loops",
        "difficulty": "intermediate",
        "code": [
          "public class MenuSystem {",
          "    // Create a function that takes decimal parameter and returns decimal",
          "    public static double addTax(double price) {",
          "        // Return price plus tax (multiply by 1.08)",
          "        return price * 1.08;",
          "    }",
          "    // Create a function that takes text and decimal parameters, returns nothing",
          "    public static void displayMenuItem(String item, double price) {",
          "        // Call tax function with price and store result",
          "        double withTax = addTax(price);",
          "        // Display item name and price with tax",
          "        System.out.println(item + \": $\" + withTax);",
          "    }",
          "    public static void main(String[] args) {",
          "        // Create text array with menu items (Classic, Cheese, Bacon)",
          "        String[] items = {\"Classic\", \"Cheese\", \"Bacon\"};",
          "        // Create decimal array with base prices (8.99, 9.99, 11.99)",
          "        double[] prices = {8.99, 9.99, 11.99};",
          "        // Display menu header",
          "        System.out.println(\"=== BOB'S MENU ===\");",
          "        // Create loop that goes through each menu item",
          "        for (int i = 0; i < items.length; i++) {",
          "            // Call display function with current item and price",
          "            displayMenuItem(items[i], prices[i]);",
          "        }",
          "    }",
          "}"
        ]
      },
      {
        "id": "combined_functions",
        "title": "Complete Order System",
        "description": "Multiple functions working together",
        "difficulty": "advanced",
        "code": [
          "public class OrderSystem {",
          "    // Create a function that takes text parameter and returns decimal",
          "    public static double getBasePrice(String burger) {",
          "        // Check if burger type is Classic",
          "        if (burger.equals(\"Classic\")) {",
          "            // Return Classic burger price (8.99)",
          "            return 8.99;",
          "        } else if (burger.equals(\"Cheese\")) {",
          "            // Return Cheese burger price (9.99)",
          "            return 9.99;",
          "        } else {",
          "            // Return default price (7.99) for unknown burgers",
          "            return 7.99;",
          "        }",
          "    }",
          "    // Create a function that takes decimal parameter and returns decimal",
          "    public static double addTax(double price) {",
          "        // Return price plus 8% tax (multiply by 1.08)",
          "        return price * 1.08;",
          "    }",
          "    // Create a function that takes text parameter and returns decimal",
          "    public static double processOrder(String burgerType) {",
          "        // Call base price function with burger type and store result",
          "        double basePrice = getBasePrice(burgerType);",
          "        // Call tax function with base price and return the result",
          "        return addTax(basePrice);",
          "    }",
          "    public static void main(String[] args) {",
          "        // Create text array with customer orders (Classic, Cheese, Deluxe)",
          "        String[] orders = {\"Classic\", \"Cheese\", \"Deluxe\"};",
          "        // Display processing header",
          "        System.out.println(\"Processing Orders:\");",
          "        // Create loop that goes through each order",
          "        for (int i = 0; i < orders.length; i++) {",
          "            // Call process function with current order and store result",
          "            double total = processOrder(orders[i]);",
          "            // Display order number, burger type, and final total",
          "            System.out.println(\"Order \" + (i + 1) + \": \" + orders[i] + \" = $\" + total);",
          "        }",
          "    }",
          "}"
        ]
      }
    ]
  }
}