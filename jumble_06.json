{
  "problemSet": {
    "title": "Java Collections Framework - Chapter 6",
    "description": "Dynamic data structures including ArrayList, LinkedList, HashSet, HashMap, and Collections utilities with music theme",
    "version": "1.0",
    "problems": [
      {
        "id": "arraylist_basic",
        "title": "Simple Playlist Builder",
        "description": "Creating and adding to ArrayList",
        "difficulty": "beginner",
        "code": [
          "import java.util.ArrayList;",
          "public class PlaylistBuilder {",
          "    public static void main(String[] args) {",
          "        // Create an ArrayList that stores text values",
          "        ArrayList<String> playlist = new ArrayList<>();",
          "        // Add first song to end of list (Hotel California)",
          "        playlist.add(\"Hotel California\");",
          "        // Add second song to end of list (Bohemian Rhapsody)",
          "        playlist.add(\"Bohemian Rhapsody\");",
          "        // Add third song to end of list (Stairway to Heaven)",
          "        playlist.add(\"Stairway to Heaven\");",
          "        // Display the total number of songs",
          "        System.out.println(\"Songs: \" + playlist.size());",
          "        // Display the first song using index 0",
          "        System.out.println(\"First: \" + playlist.get(0));",
          "        // Display the last song using last index",
          "        System.out.println(\"Last: \" + playlist.get(playlist.size() - 1));",
          "    }",
          "}"
        ]
      },
      {
        "id": "arraylist_search",
        "title": "Song Finder",
        "description": "Searching and checking ArrayList contents",
        "difficulty": "beginner",
        "code": [
          "import java.util.ArrayList;",
          "public class SongFinder {",
          "    public static void main(String[] args) {",
          "        // Create an ArrayList that stores text values",
          "        ArrayList<String> songs = new ArrayList<>();",
          "        // Add songs to the list (Yesterday, Hey Jude, Let It Be)",
          "        songs.add(\"Yesterday\");",
          "        songs.add(\"Hey Jude\");",
          "        songs.add(\"Let It Be\");",
          "        // Create text variable for song to search (Hey Jude)",
          "        String searchSong = \"Hey Jude\";",
          "        // Check if the list contains the search song",
          "        if (songs.contains(searchSong)) {",
          "            // Find the position of the search song",
          "            int position = songs.indexOf(searchSong);",
          "            // Display found message with position",
          "            System.out.println(\"Found at position: \" + position);",
          "        } else {",
          "            // Display not found message",
          "            System.out.println(\"Not found\");",
          "        }",
          "    }",
          "}"
        ]
      },
      {
        "id": "arraylist_modify",
        "title": "Playlist Updater",
        "description": "Modifying ArrayList contents",
        "difficulty": "intermediate",
        "code": [
          "import java.util.ArrayList;",
          "public class PlaylistUpdater {",
          "    public static void main(String[] args) {",
          "        // Create an ArrayList that stores text values",
          "        ArrayList<String> playlist = new ArrayList<>();",
          "        // Add initial songs (Old Song, Good Song, Bad Song)",
          "        playlist.add(\"Old Song\");",
          "        playlist.add(\"Good Song\");",
          "        playlist.add(\"Bad Song\");",
          "        // Replace song at index 0 with new song (Great Song)",
          "        playlist.set(0, \"Great Song\");",
          "        // Remove the song Bad Song from the list",
          "        playlist.remove(\"Bad Song\");",
          "        // Add new song at the end (Amazing Song)",
          "        playlist.add(\"Amazing Song\");",
          "        // Use enhanced loop to display each song",
          "        for (String song : playlist) {",
          "            // Display current song",
          "            System.out.println(song);",
          "        }",
          "    }",
          "}"
        ]
      },
      {
        "id": "hashset_basic",
        "title": "Unique Artist Collection",
        "description": "Using HashSet to prevent duplicates",
        "difficulty": "intermediate",
        "code": [
          "import java.util.HashSet;",
          "public class ArtistCollection {",
          "    public static void main(String[] args) {",
          "        // Create a HashSet that stores text values",
          "        HashSet<String> artists = new HashSet<>();",
          "        // Add first artist (Queen)",
          "        artists.add(\"Queen\");",
          "        // Add second artist (Beatles)",
          "        artists.add(\"Beatles\");",
          "        // Try to add Queen again (will be ignored)",
          "        artists.add(\"Queen\");",
          "        // Add third artist (Led Zeppelin)",
          "        artists.add(\"Led Zeppelin\");",
          "        // Display total unique artists",
          "        System.out.println(\"Unique artists: \" + artists.size());",
          "        // Check if Queen is in the collection",
          "        if (artists.contains(\"Queen\")) {",
          "            // Display found message",
          "            System.out.println(\"Queen found\");",
          "        }",
          "        // Use enhanced loop to display each artist",
          "        for (String artist : artists) {",
          "            // Display current artist",
          "            System.out.println(artist);",
          "        }",
          "    }",
          "}"
        ]
      },
      {
        "id": "hashmap_basic",
        "title": "Song Database",
        "description": "Using HashMap for key-value relationships",
        "difficulty": "intermediate",
        "code": [
          "import java.util.HashMap;",
          "public class SongDatabase {",
          "    public static void main(String[] args) {",
          "        // Create a HashMap that maps text keys to text values",
          "        HashMap<String, String> songDB = new HashMap<>();",
          "        // Add song-to-artist mapping (Imagine -> John Lennon)",
          "        songDB.put(\"Imagine\", \"John Lennon\");",
          "        // Add song-to-artist mapping (Thriller -> Michael Jackson)",
          "        songDB.put(\"Thriller\", \"Michael Jackson\");",
          "        // Add song-to-artist mapping (Billie Jean -> Michael Jackson)",
          "        songDB.put(\"Billie Jean\", \"Michael Jackson\");",
          "        // Create text variable for song to lookup (Thriller)",
          "        String lookupSong = \"Thriller\";",
          "        // Get the artist for the lookup song",
          "        String artist = songDB.get(lookupSong);",
          "        // Check if artist was found (not null)",
          "        if (artist != null) {",
          "            // Display song and artist",
          "            System.out.println(lookupSong + \" by \" + artist);",
          "        } else {",
          "            // Display not found message",
          "            System.out.println(\"Song not found\");",
          "        }",
          "        // Display total number of songs in database",
          "        System.out.println(\"Total songs: \" + songDB.size());",
          "    }",
          "}"
        ]
      },
      {
        "id": "collections_sort",
        "title": "Playlist Sorter",
        "description": "Using Collections utilities to sort",
        "difficulty": "intermediate",
        "code": [
          "import java.util.ArrayList;",
          "import java.util.Collections;",
          "public class PlaylistSorter {",
          "    public static void main(String[] args) {",
          "        // Create an ArrayList that stores text values",
          "        ArrayList<String> songs = new ArrayList<>();",
          "        // Add songs in random order (Zebra, Apple, Monkey, Banana)",
          "        songs.add(\"Zebra\");",
          "        songs.add(\"Apple\");",
          "        songs.add(\"Monkey\");",
          "        songs.add(\"Banana\");",
          "        // Display original order",
          "        System.out.println(\"Original: \" + songs);",
          "        // Sort the list alphabetically",
          "        Collections.sort(songs);",
          "        // Display sorted order",
          "        System.out.println(\"Sorted: \" + songs);",
          "        // Shuffle the list randomly",
          "        Collections.shuffle(songs);",
          "        // Display shuffled order",
          "        System.out.println(\"Shuffled: \" + songs);",
          "    }",
          "}"
        ]
      },
      {
        "id": "collections_frequency",
        "title": "Artist Counter",
        "description": "Using Collections.frequency to count occurrences",
        "difficulty": "intermediate",
        "code": [
          "import java.util.ArrayList;",
          "import java.util.Collections;",
          "public class ArtistCounter {",
          "    public static void main(String[] args) {",
          "        // Create an ArrayList that stores text values",
          "        ArrayList<String> artists = new ArrayList<>();",
          "        // Add artists with duplicates (Beatles, Queen, Beatles, Eagles, Beatles)",
          "        artists.add(\"Beatles\");",
          "        artists.add(\"Queen\");",
          "        artists.add(\"Beatles\");",
          "        artists.add(\"Eagles\");",
          "        artists.add(\"Beatles\");",
          "        // Count how many times Beatles appears in the list",
          "        int beatlesCount = Collections.frequency(artists, \"Beatles\");",
          "        // Count how many times Queen appears in the list",
          "        int queenCount = Collections.frequency(artists, \"Queen\");",
          "        // Display Beatles count",
          "        System.out.println(\"Beatles: \" + beatlesCount);",
          "        // Display Queen count",
          "        System.out.println(\"Queen: \" + queenCount);",
          "        // Display total artists including duplicates",
          "        System.out.println(\"Total: \" + artists.size());",
          "    }",
          "}"
        ]
      },
      {
        "id": "comprehensive_music_system",
        "title": "Music Collection Manager",
        "description": "Combining multiple collection types",
        "difficulty": "advanced",
        "code": [
          "import java.util.ArrayList;",
          "import java.util.HashSet;",
          "import java.util.HashMap;",
          "import java.util.Collections;",
          "public class MusicManager {",
          "    public static void main(String[] args) {",
          "        // Create ArrayList for user playlist",
          "        ArrayList<String> playlist = new ArrayList<>();",
          "        // Create HashSet for unique genres",
          "        HashSet<String> genres = new HashSet<>();",
          "        // Create HashMap for song-to-artist mapping",
          "        HashMap<String, String> songDB = new HashMap<>();",
          "        // Add songs to playlist (Imagine, Thriller, Hotel California)",
          "        playlist.add(\"Imagine\");",
          "        playlist.add(\"Thriller\");",
          "        playlist.add(\"Hotel California\");",
          "        // Add genres (Rock, Pop, Classic Rock, Pop)",
          "        genres.add(\"Rock\");",
          "        genres.add(\"Pop\");",
          "        genres.add(\"Classic Rock\");",
          "        genres.add(\"Pop\");",
          "        // Add song-artist pairs to database",
          "        songDB.put(\"Imagine\", \"John Lennon\");",
          "        songDB.put(\"Thriller\", \"Michael Jackson\");",
          "        songDB.put(\"Hotel California\", \"Eagles\");",
          "        // Sort playlist alphabetically",
          "        Collections.sort(playlist);",
          "        // Display sorted playlist",
          "        System.out.println(\"Sorted playlist: \" + playlist);",
          "        // Display unique genre count",
          "        System.out.println(\"Unique genres: \" + genres.size());",
          "        // Look up artist for first song in sorted playlist",
          "        String firstSong = playlist.get(0);",
          "        String artist = songDB.get(firstSong);",
          "        // Display first song and its artist",
          "        System.out.println(\"First song: \" + firstSong + \" by \" + artist);",
          "    }",
          "}"
        ]
      }
    ]
  }
}